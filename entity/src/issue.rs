//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "issue")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub title: String,
    pub body: Option<String>,
    pub url: String,
    pub state: Option<String>,
    pub created_at: Option<String>,
    pub updated_at: Option<String>,
    pub closed_at: Option<String>,
    pub closed_by_id: i32,
    pub owner_id: i32,
    pub comment_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::CommentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::owner::Entity",
        from = "Column::OwnerId",
        to = "super::owner::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Owner2,
    #[sea_orm(
        belongs_to = "super::owner::Entity",
        from = "Column::ClosedById",
        to = "super::owner::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Owner1,
}

impl ActiveModelBehavior for ActiveModel {}
